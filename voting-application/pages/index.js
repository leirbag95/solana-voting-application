import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { Connection, PublicKey } from '@solana/web3.js';
import { Program, Provider, web3 } from '@project-serum/anchor';
import idl from '../idl.json';
import { FC, useEffect, useState } from 'react';

import { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets';
import { useWallet, WalletProvider, ConnectionProvider, useConnection } from '@solana/wallet-adapter-react';
import { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';
require('@solana/wallet-adapter-react-ui/styles.css');

const wallets = [new PhantomWalletAdapter()]

const { SystemProgram, Keypair } = web3;
const baseAccount = Keypair.generate();
const opts = {
  preflightCommitment: "processed"
}
const programID = new PublicKey(idl.metadata.address);


function App() {
  const [value, setValue] = useState('');
  const wallet = useWallet();
  const { connection } = useConnection();
  console.log('connection: ', connection);

  useEffect(() => {
    if (wallet.publicKey) {
      console.log(wallet.publicKey.toBase58())
    }
  }, [wallet.publicKey, connection])

  async function getProvider() {
    /* create the provider and return it to the caller */
    /* network set to local network for now */
    const provider = new Provider(
      connection, wallet, opts.preflightCommitment,
    );
    return provider;
  }


  async function initializeMint() {
    const provider = await getProvider();
    /* create the program interface combining the idl, program ID, and provider */
    const program = new Program(idl, programID, provider);
    try {
      /* interact with the program via rpc */
      await program.rpc.initialize("Hello World", {
        accounts: {
          mint: mint.publicKey,
          payer: provider.wallet.publicKey,
          systemProgram: SystemProgram.programId,
        },
        signers: [baseAccount]
      });

      const account = await program.account.mint.fetch(mint.publicKey);
      console.log('account: ', account);
      setValue(account.supply.toString());
    } catch (err) {
      console.log("Transaction error: ", err);
    }
  }




  if (!wallet.connected) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>
        <WalletMultiButton />
      </div>
    )
  } else {
    return (
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <h1 className={styles.title}>
            Voting Application
          </h1>

          <p className={styles.description}>
            Vote either Candidate A or B
          </p>

          <div className={styles.grid}>
            <div className={styles.card}>
              <h2>Initialize Voting &rarr;</h2>
              <p>{!value && (<button onClick={initializeMint}>Initialize</button>)}</p>
            </div>

            <div className={styles.card}>
              <h2>Receive Token &rarr;</h2>
              <p>Run this after initialize voting</p>
            </div>

            <div className={styles.card} >
              <h2>Vote &rarr;</h2>
              <p>Transfers token to Candidate A</p>
            </div>
            <div className={styles.card} >
              <h2>Vote &rarr;</h2>
              <p>Transfers token to Candidate B</p>
            </div>
          </div>
        </main>


      </div>
    )
  }
}

const AppWithProvider = () => (

  <WalletProvider wallets={wallets} autoConnect>
    <WalletModalProvider>
      <App />
    </WalletModalProvider>
  </WalletProvider>
)

export default AppWithProvider;


